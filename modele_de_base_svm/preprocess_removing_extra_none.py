# -*- coding: utf-8 -*-
"""preprocess.ipynb

Automatically generated by Colaboratory.
"""

from google.colab import drive
drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
# %cd gdrive/My\ Drive/ABSA-DistilBERT/

import pandas as pd
import os
import argparse
from torch.optim import AdamW

from torch import nn
import torch
import numpy as np
from scipy.special import softmax

import logging
import time

logging.basicConfig(format = '%(asctime)s - %(levelname)s - %(name)s -   %(message)s', 
                    datefmt = '%m/%d/%Y %H:%M:%S',
                    level = logging.INFO)
logger = logging.getLogger(__name__)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

word_to_idx = {"None" : 0, "Positive" : 1, "Negative" : 2}
data_dir = "data/sentihood/bert-pair/"
data = pd.read_csv(os.path.join(data_dir, "train_QA_M.tsv"), sep="\t")
test_data = pd.read_csv(os.path.join(data_dir, "test_QA_M.tsv"), sep="\t")

test_data["label_1"] = test_data.label.map(word_to_idx)
data["label_1"] = data.label.map(word_to_idx)

df = {}

for index,row in data.iterrows():
    if row['id'] not in df.keys():
      df[row['id']] = row['label_1']
    else:
      if row['label_1'] > df[row['id']]:
        df[row['id']] = row['label_1']
      

print(df)

df_train = pd.DataFrame()

for index, row in data.iterrows():
  if df[row['id']] != 0:
    if row['label_1'] != 0:
        df_train = df_train.append(row)
  else:
    df_train = df_train.append(row)

print(df_train)

df_train = df_train.drop(columns = 'positions')
df_train = df_train.drop(columns = 'label_1')
#print(df_train[df_train['id'] == 1000])

df_train.to_csv('new_train_QA_M.csv')

d = {}

for index,row in test_data.iterrows():
    if row['id'] not in d.keys():
      d[row['id']] = row['label_1']
    else:
      if row['label_1'] > d[row['id']]:
        d[row['id']] = row['label_1']
      

print(d)

df_test = pd.DataFrame()

for index, row in test_data.iterrows():
  if d[row['id']] != 0:
    if row['label_1'] != 0:
        df_test = df_test.append(row)
  else:
    df_test = df_test.append(row)

print(df_test)

df_test = df_test.drop(columns = 'positions')
df_test = df_test.drop(columns = 'label_1')

df_test.to_csv('new_test_QA_M.csv')