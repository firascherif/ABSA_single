# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.
"""

from google.colab import drive
drive.mount('/content/drive/')

# Commented out IPython magic to ensure Python compatibility.
# %cd drive/My Drive/ABSA-DistilBERT/

import pandas as pd
import os
import argparse
from torch.optim import AdamW

from torch import nn
import torch
import numpy as np
import logging
import time

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn import svm
from sklearn.metrics import classification_report

logging.basicConfig(format = '%(asctime)s - %(levelname)s - %(name)s -   %(message)s', 
                    datefmt = '%m/%d/%Y %H:%M:%S',
                    level = logging.INFO)
logger = logging.getLogger(__name__)

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

word_to_idx = {"None" : 0, "Positive" : 1, "Negative" : 2}
data_dir = "data/sentihood/bert-pair/"
data = pd.read_csv(os.path.join(data_dir, "new_train_QA_M.csv"))
test_data = pd.read_csv(os.path.join(data_dir, "new_test_QA_M.csv"))

test_data["label"] = test_data.label.map(word_to_idx)
data["label"] = data.label.map(word_to_idx)

# Create feature vectors
vectorizer = TfidfVectorizer(min_df = 5,
                             max_df = 0.8,
                             sublinear_tf = True,
                             use_idf = True)

train_vectors = vectorizer.fit_transform(data['sentence1'])
test_vectors = vectorizer.transform(test_data['sentence1'])

train_vectors.shape

test_vectors.shape

# Perform classification with SVM, kernel=rbf
classifier = svm.SVC(kernel='rbf',probability=True)
t0 = time.time()
classifier.fit(train_vectors, data['label'])
t1 = time.time()
prediction = classifier.predict(test_vectors)
t2 = time.time()
time_train = t1-t0
time_predict = t2-t1
# results
print("Training time: %fs; Prediction time: %fs" % (time_train, time_predict))
report = classification_report(test_data['label'], prediction, output_dict=True)

print('none: ', report['0'])
print('pos: ', report['1'])
print('neg: ', report['2'])

prob = classifier.predict_proba(test_vectors)
pre = classifier.predict(test_vectors)

with open(os.path.join('data/', "svm_2"+".txt"), "w") as f_test:
  for output_i in range(len(prob)):
    f_test.write(str(pre[output_i]))
    for ou in prob[output_i]:
      f_test.write(" "+str(ou))
    f_test.write("\n")

# !python evaluation.py --pred_data_dir data/svm_2.txt